{% extends 'parent.html.twig' %}

{% block stylesheets %}
	<link rel="stylesheet" href="{{ asset('css/accueil.css') }}" type="text/css">
{% endblock %}

{% block content %}
	{{ dump(actualUserName) }}
	{{ dump(actualUserId) }}
	<div class="container with-margin">
		<div class="row">
			{% for photo in allPhotos %}
				<div class="col-md-6 col-lg-6 mb-6">
					<div class="card-center">
						<div class="card">
							<img src="http://127.0.0.1:3000/images/photos/{{ photo.image }}" class="card-img" alt="Photo">
							<div class="card-body">
								<p class="card-text">
									<button class="like-button" data-photo-id="{{ photo.id }}" data-action="like">
										<img src="{{ asset('images/like.png') }}" class="image-like">
									</button>
									<span id="like-count-{{ photo.id }}">{{ photo.likesCount }}</span>
									<button class="like-button" data-photo-id="{{ photo.id }}" data-action="dislike">
										<img src="{{ asset('images/dislike.png') }}" class="image-like">
									</button>
									<span id="dislike-count-{{ photo.id }}">{{ photo.dislikesCount }}</span>
									<span class="date">{{ photo.datePoste }}</span>
								</p>


								<h5 class="card-title">{{ photo.description }}</h5>
								{% if photo.user %}
									<p class="card-text">
										Posté par @{{ photo.user.username }}</p>
								{% else %}
									<p class="card-text">Unknown User</p>
									<!-- Gestion si l'utilisateur est introuvable -->
								{% endif %}

							</div>

							<div class="comments-section">
								<h6>Commentaires :
									<button class="comment-button" onclick="toggleCommentForm(this)">+ Ajouter un commentaire</button>

								</h6>
								<div
									class="comment-form" style="display: none;">
									<!-- Formulaire pour ajouter un commentaire -->
									<form action="{{ path('add_comment') }}" method="POST">
										<input type="hidden" name="comment_photo_id" value="{{ photo.id }}">
										<input type="hidden" name="comment_username" value="{{ actualUserName }}">
										<textarea name="commentaire" rows="4" cols="50" placeholder="Écrivez votre commentaire ici..."></textarea>
										<div class="boutonAjouter">
											<input type="submit" value="Ajouter">
										</div>
									</form>
								</div>
								<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
								<script>
									function toggleCommentForm(button) {
$(button).closest('.comments-section').find('.comment-form').toggle();
}
								</script>
								{% set commentsForPhoto = allComments|filter(comment => comment.photo.id == photo.id) %}
								{% if commentsForPhoto|length > 0 %}
									{% for comment in commentsForPhoto %}
										<div class="comment">
											<div class="comment-user-date">
												<strong class="comment-user">@{{ comment.user.username }}</strong>
												<span class="comment-date">{{ comment.dateCommentaire }}</span>
											</div>
											<p class="comment-text">{{ comment.description }}</p>

											<!-- Likes pour le commentaire -->
											<div class="comment-likes">
												<button class="like-button" data-comment-id="{{ comment.id }}" data-action="like-comment">
													<img src="{{ asset('images/like.png') }}" class="image-like-commentaire">
												</button>
												{{ comment.likesCount }}
												<button class="like-button" data-comment-id="{{ comment.id }}" data-action="dislike-comment">
													<img src="{{ asset('images/dislike.png') }}" class="image-like-commentaire">
												</button>
												{{ comment.dislikesCount }}
											</div>

											<!-- Vérification des commentaires enfants -->
											{% set childrenComments = commentsForPhoto|filter(item => item.commentaireParent is not null and item.commentaireParent.id == comment.id) %}
											{% if childrenComments is not empty %}
												<div class="children-comments">
													{% for childComment in childrenComments %}
														<div class="comment-child">
															<div class="intern-comment">
																<strong class="comment-user">@{{ childComment.user.username }}</strong>
																<p class="comment-text">{{ childComment.description }}</p>
																<span class="comment-date">{{ childComment.dateCommentaire }}</span>
															</div>
														</div>
													{% endfor %}
												</div>
											{% endif %}
										</div>
									{% endfor %}
								{% else %}
									<p class="aucun-com">Aucun commentaire pour cette photo !</p>
								{% endif %}

							</div>
						</div>
					</div>
				</div>

				
			{% endfor %}
		</div>
	</div>

	<script>
		document.querySelectorAll('.like-button').forEach(button => {
			button.addEventListener('click', function() {
				const isPhotoLike = this.getAttribute('data-action') === 'like';
				const photoId = this.getAttribute('data-photo-id');
				const userId = '{{ actualUserId }}'; // Remplissez avec l'ID de l'utilisateur actuel

				const cookieName = `liked-${userId}-${photoId}`;
        		const hasUserLiked = getCookie(cookieName); // Vérifie le cookie

				if (isPhotoLike && hasUserLiked) {
					// Si l'utilisateur a déjà liké, envoie une requête pour supprimer le like
					fetch(`http://127.0.0.1:3000/api/photolikes/${photoId}`, {
						method: 'DELETE',
					})
					.then(response => {
						if (!response.ok) {
							throw new Error('Erreur lors de la suppression du like');
						}
						return response.json();
					})
					.then(data => {
						console.log('Like supprimé avec succès:', data);

						const likeCountElement = document.getElementById(`like-count-${photoId}`);
						likeCountElement.textContent = data.updatedLikeCount; // Mettre à jour le nombre de likes

						setCookieWithoutExpiration(cookieName, ''); // Supprimer le cookie

						this.classList.remove('liked'); // Retirer la classe 'liked' pour le style
						this.disabled = false; // Activer à nouveau le bouton
					})
					.catch(error => {
						console.error('Erreur:', error.message);
						// Gérer l'erreur si nécessaire
					});
				} else {

					fetch('http://127.0.0.1:3000/api/photolikes', {
						method: 'POST',
						headers: {
							'Content-Type': 'application/json',
						},
						body: JSON.stringify({
							photoId: photoId,
							userId: userId,
							likeType: true // True pour like, false pour dislike
						}),
					})
					.then(response => {
						if (!response.ok) {
							throw new Error('Erreur lors de l\'ajout du like');
						}
						return response.json();
					})
					.then(data => {
						// Gérer la réponse si nécessaire
						console.log('Like ajouté avec succès:', data);
						// Mettre à jour le nombre de likes dans l'interface
						const likeCountElement = document.getElementById(`like-count-${photoId}`);
    					likeCountElement.textContent = data.updatedLikeCount;

						// Stocker le like dans un cookie
                		setCookieWithoutExpiration(`liked-${userId}-${photoId}`, 'true');

						// Désactiver le bouton de like après le premier clic
                		this.classList.add('liked');
                		this.disabled = true;
					})
					.catch(error => {
						console.error('Erreur:', error.message);
						// Gérer l'erreur si nécessaire
					});
				}
			});
		});

	// Fonctions utilitaires pour les cookies
	function setCookieWithoutExpiration(name, value) {
    	document.cookie = `${name}=${value};expires=Fri, 31 Dec 9999 23:59:59 GMT;path=/`;
	}

	function getCookie(name) {
		const cookieName = `${name}=`;
		const decodedCookie = decodeURIComponent(document.cookie);
		const cookieArray = decodedCookie.split(';');

		for (let i = 0; i < cookieArray.length; i++) {
			let cookie = cookieArray[i];
			while (cookie.charAt(0) === ' ') {
				cookie = cookie.substring(1);
			}
			if (cookie.indexOf(cookieName) === 0) {
				return cookie.substring(cookieName.length, cookie.length);
			}
		}
		return null;
	}
	</script>


{% endblock %}
